SPFA 是一种用队列优化的B-F算法，看上去和BFS很像，B-F效率较低就不介绍了，
https://blog.csdn.net/qq_36932169/article/details/78806863

算法思想
初始时，只有把起点放入队列中。
遍历与起点相连的边，如果可以松弛就更新距离dis[],然后判断如果这个点没有在队列中就入队标记。
出队队首，取消标记，循环2-3步，直至队为空。
所有能更新的点都更新完毕，dis[]数组中的距离就是，起点到其他点的最短距离。
为什么SPFA可以处理负边：因为在SPFA中每一个点松弛过后说明这个点距离更近了，所以有可能通过这个点会再次优化其他点，所以将这个点入队再判断一次，而Dijkstra中是贪心的策略，每个点选择之后就不再更新，如果碰到了负边的存在就会破坏这个贪心的策略就无法处理了。
如何判断成环：
在储存边时，记录下每个点的入度，每个点入队的时候记录一次，如果入队的次数大于这个点的入度，说明从某一条路进入了两次，即该点处成环

SPFA可以处理负边

说白了变种bfs!!!!


const int INF=0x3f3f3f3f;
const int N=210;
int n,m,s,t;
int dis[N],vis[N],sum[N];
struct node{
    int v; ///点
    int weight; ///权值
};
vector<node>mp[N]; //储存边;
//SPFA写法
void SPFA(int src)
{
    int q;
    queue<int>Q;
    vis[src] = 1;
    dis[src] = 0;
    Q.push(src);
    while(!Q.empty())
    {
        q = Q.front();
        Q.pop();
        vis[q] = 0;
        for(int i=0;i<mp[q].size();i++)
        {
            if(dis[q] + mp[q][i].weight < dis[mp[q][i].v])
            {
                dis[mp[q][i].v] = dis[q] + mp[q][i].weight;
                if(!vis[mp[q][i].v])
                {
                    Q.push(mp[q][i].v);
                    vis[mp[q][i].v] = 1;
                }
            }
        }
    }
    return ;
}
