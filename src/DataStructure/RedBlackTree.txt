https://blog.csdn.net/tanrui519521/article/details/80980135

红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：

性质1：每个节点要么是黑色，要么是红色。
性质2：根节点是黑色。
性质3：每个叶子节点（NIL）是黑色。
性质4：每个红色结点的两个子结点一定都是黑色。
性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。





红黑树插入节点代码实现如下：
bool Insert(const K& key, const V& value)
    {
        //根节点为空
        if (_root == NULL)
        {
            _root = new Node(key,value);
            _root->_color = BLACK;

            return true;
        }
        //根节点不为空

        //找到新节点插入位置
        Node* parent = NULL;
        Node* cur = _root;

        while (cur)
        {
            if (cur->_key < key)
            {
                parent = cur;
                cur = cur->_right;
            }
            else if (cur->_key >key)
            {
                parent = cur;
                cur = cur->_left;
            }
            else
                return false;
        }
        //插入新节点
        cur = new Node(key, value);
        cur->_color = RED;
        if (parent->_key > key)
        {
            parent->_left = cur;
            cur->_parent = parent;
        }
        else//parent->_key < key
        {
            parent->_right = cur;
            cur->_parent = parent;
        }

        //插入节点后颜色的调整
        while (parent && parent->_color == RED)
        {
            Node* grandfather = parent->_parent;//grandfather颜色一定为黑色
            if (parent == grandfather->_left)
            {
                Node* uncle = grandfather->_right;

                //uncle存在且为红
                if (uncle && uncle->_color == RED)
                {
                    parent->_color = uncle->_color = BLACK;
                    grandfather->_color = RED;

                    cur = grandfather;
                    parent = cur->_parent;
                }
                else//uncle不存在/uncle存在且为黑
                {
                    if (cur == parent->_right)
                    {
                        RotateL(parent);
                        swap(parent, cur);
                    }
                    RotateR(grandfather);
                    parent->_color = BLACK;
                    grandfather->_color = RED;
                }
            }
            else//grandfather->_right==parent
            {
                Node* uncle = grandfather->_left;

                //uncle存在且为红
                if (uncle && uncle->_color == RED)
                {
                    parent->_color = uncle->_color = BLACK;
                    grandfather->_color = RED;

                    cur = grandfather;
                    parent = cur->_parent;
                }
                else//不存在/存在且为黑
                {
                    if (cur == parent->_left)
                    {
                        RotateR(parent);
                        swap(cur, parent);
                    }

                    RotateL(grandfather);
                    parent->_color = BLACK;
                    grandfather->_color = RED;
                }
            }
        }//end while (parent && parent->_color == RED)

        _root->_color = BLACK;

        return true;
    }