https://blog.csdn.net/jk_chen_acmer/article/details/79305269

求解公式(a/b)%m 时，因b可能会过大，会出现爆精度的情况，所以需变除法为乘法：
设c是b的逆元，则有b*c≡1(mod m)；

则(a/b)%m = (a/b)*1%m = (a/b)*b*c%m = a*c(mod m);
即a/b的模等于a*b的逆元的模；

如何求逆元?

k*m+1=b*c

b*c+(-k)*m=1  ===>扩展欧几里得

#include<iostream>
#include<cstdio>
#define D long long
using namespace std;

D exgcd(D a,D b,D &x,D &y){
    if(b==0){
        x=1;y=0;return a;
    }
    D d=exgcd(b,a%b,y,x);
    y-=a/b*x;
    return d;
}

D inv(D b,D m){//b*c≡1(mod m) -> b*c+m*k = 1
    D c,k;
    D d=exgcd(b,m,c,k);//因为b,m互质，所以d==1 ,r就是m，c/=d可省略
    c/=d;
    D r=m/d;//r为多个解c1，c2，c3的差
    c=(c%r+r)%r;
    return c;
}


int main()
{
    D b,m;
    while(cin>>b>>m){
        cout<<inv(b,m)<<endl;
    }
}



---------------------------------------------------------------------->>>>>>>>>>
方法2：

因为x^(p-1) ≡ 1（mod p），所以x * x^(p-2) ≡ 1 ( mod p ) ，即x的逆元为x^(p-2) 。注意：根据费马小定理，x与p互质时才可以用此方法。

逆元的应用:
例如求组合数C(a,b) % mod
按照公式 C(a,b) = a! / b! / ( a - b )!
此时便可以运用逆元防止精度的问题，因为是%mod，所以乘法基本不会出错。
C(a,b) % mod = a! * inv [b!] * inv [( a - b )!] % mod

inv [ i! ] = inv [1] * inv [2] * … * inv [i]









