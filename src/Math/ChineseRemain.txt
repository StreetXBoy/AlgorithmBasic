https://blog.csdn.net/jk_chen_acmer/article/details/81505699

x=2 mod 3

x=3 mod 5

x=2 mod 7

void exgcd(LL a,LL b,LL &x,LL &y) { //a在模b下的逆元为x
    if(b==0) {
        x=1;
        y=0;
        return;
    }
    exgcd(b,a%b,x,y);
    LL tp=x;
    x=y;
    y=tp-a/b*y;
}
int main() {
    while(cin>>n) {
        M=1;
        ans=0;
        for(LL i=1; i<=n; i++) {
            m[i]=read(),a[i]=read(); // ans % m = a;
            M*=m[i];
        }
        for(LL i=1; i<=n; i++) {
            LL Mi=M/m[i];
            LL inv,y;
            exgcd(Mi,m[i],x,y);
            ans+=a[i]*Mi%M *inv%M;
            ans%=M;
        }
        cout<<ans<<'\n';
    }
}

非互质版

#include<iostream>
#include<string>
#include<algorithm>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<queue>
#include<map>
#include<stack>
#include<set>
#include<cstdlib>

using namespace std;

#define LL long long
const int inf = 0x3f3f3f3f;
const int maxn = 1e5 + 5;
int n;
void ex_gcd(LL a, LL b, LL &d, LL &x, LL &y) {
    if (!b) {
        d = a, x = 1, y = 0;
    } else {
        ex_gcd(b, a % b, d, y, x);
        y -= x * (a / b);
    }
}
LL ex_crt(LL *m, LL *r, int n) {
    LL M = m[1], R = r[1], x, y, d;
    for (int i = 2; i <= n; ++i) {
        ex_gcd(M, m[i], d, x, y);
        if ((r[i] - R) % d)
            return -1;
        x = (r[i] - R) / d * x % (m[i] / d);
        R += x * M;
        M = M / d * m[i];
        R %= M;
    }
    return R > 0 ? R : R + M;
}
LL m[maxn], r[maxn];
int main() {
    while (~scanf("%d",&n)) {
        for (int i = 1; i <= n; ++i)
            scanf("%lld%lld", &m[i], & r[i]);
        printf("%lld\n",ex_crt(m,r,n));
    }
    return 0;
}




