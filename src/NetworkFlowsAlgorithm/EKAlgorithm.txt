https://www.cnblogs.com/graytido/p/10809211.html

残量网络： 拥有源点和汇点且每条边都有残留容量的网络。残量网络 = 容量网络 − 流量网络。
（表示了分配了一定的水流量后还能继续承受的水流量路线图）

增广路算法(EK算法)


增广路 (𝐴𝑢𝑔𝑚𝑒𝑛𝑡𝑖𝑛𝑔 𝑃𝑎𝑡ℎ)： 一条在残量网络中从 𝑆 到 𝑇 的路径，路径上所有边的残留容量都为正。
（可以成功从水厂将水送到小区的一条路线）

增广路定理 (𝐴𝑢𝑔𝑚𝑒𝑛𝑡𝑖𝑛𝑔 𝑃𝑎𝑡ℎ 𝑇ℎ𝑒𝑜𝑟𝑒𝑚)： 流量网络达到最大流当且仅当残量网络中没有增广路。
（无法再找到一路线使得小区获得更多的流量了）

增广路方法 (𝐹𝑜𝑟𝑑−𝐹𝑢𝑙𝑘𝑒𝑟𝑠𝑜𝑛)： 不断地在残量网络中找出一条从 𝑆 到 𝑇 的增广路，然后根据木桶定律向汇点发送流量并修改路径上的所有边的残留容量，直到无法找到增广路为止。该方法的基础为增广路定理，简称 𝐹𝐹 方法。
（如果有一条路径可以将水运到小区里就执行，直到无法再运送时终止）

增广路算法 (𝐸𝑑𝑚𝑜𝑛𝑑𝑠−𝐾𝑎𝑟𝑝)： 基于增广路方法的一种算法，核心为 𝑏𝑓𝑠 找最短增广路，并按照 𝐹𝐹 方法执行操作。增广路算法的出现使得最大流问题被成功解决，简称 𝐸𝐾 算法。


-----------------------------------------------------------------------------------------------


下面对 𝐸𝐾 算法作详细介绍。

1.找到一条从源点到汇点的路径，使得路径上任意一条边的残量>0（注意是大于而不是大于等于，这意味着这条边还可以分配流量），这条路径便称为增广路
2.找到这条路径上最小的F[u][v]（我们设F[u][v]表示u->v这条边上的残量即剩余流量），下面记为flow
3.将这条路径上的每一条有向边u->v的残量减去flow，同时对于起反向边v->u的残量加上flow
4.重复上述过程，直到找不出增广路，此时我们就找到了最大流


-------------------------------------------------------->



#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
#define Re register int
using namespace std;
const int N=1e4+3,M=1e5+3,inf=2e9;
int x,y,z,o=1,n,m,h,t,st,ed,maxflow,Q[N],cyf[N],pan[N],pre[N],head[N];
struct QAQ{int to,next,flow;}a[M<<1];
inline void in(Re &x){
    int f=0;x=0;char c=getchar();
    while(c<'0'||c>'9')f|=c=='-',c=getchar();
    while(c>='0'&&c<='9')x=(x<<1)+(x<<3)+(c^48),c=getchar();
    x=f?-x:x;
}
inline void add(Re x,Re y,Re z){a[++o].flow=z,a[o].to=y,a[o].next=head[x],head[x]=o;}
inline int bfs(Re st,Re ed){
    for(Re i=0;i<=n;++i)pan[i]=0;
    h=1,t=0,pan[st]=1,Q[++t]=st,cyf[st]=inf;//注意起点cfy的初始化
    while(h<=t){
        Re x=Q[h++];
        for(Re i=head[x],to;i;i=a[i].next)
            if(a[i].flow&&!pan[to=a[i].to]){//增广路上的每条边残留容量均为正
            	cyf[to]=min(cyf[x],a[i].flow);
            	//用cyf[x]表示找到的路径上从S到x途径边残留容量最小值
            	Q[++t]=to,pre[to]=i,pan[to]=1;//记录选择的边在链表中的下标
            	if(to==ed)return 1;//如果达到终点，说明最短增广路已找到，结束bfs
            }
    }
    return 0;
}
inline void EK(Re st,Re ed){
    while(bfs(st,ed)==1){
        Re x=ed;maxflow+=cyf[ed];//cyf[ed]即为当前路径上边残留容量最小值
        while(x!=st){//从终点开始一直更新到起点
            Re i=pre[x];
            a[i].flow-=cyf[ed];
            a[i^1].flow+=cyf[ed];
            x=a[i^1].to;//链表特性，反向边指向的地方就是当前位置的父亲
        }
    }
}
int main(){
    in(n),in(m),in(st),in(ed);
    while(m--)in(x),in(y),in(z),add(x,y,z),add(y,x,0);
    EK(st,ed);
    printf("%d",maxflow);
}




