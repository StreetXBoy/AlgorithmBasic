https://www.cnblogs.com/-citywall123/p/11329508.html


EK算法 + SPFA 最短路
　　  我们用每条边单位流量的花费作为边权，假如一条合法路径上每条边的花费分别为 c1,c2,.......ck ， 并且这条边上的最小流量为flow，

　　那么这条路径上的花费为 ： c1 * flow + c2*flow + ..... + ck*flow = （c1+ c2 + c3 + .... + ck）*flow =  dis [ci] * flow

　　这里的 dis[ci] 就是我们要求的最短路！



求解步骤
　　1、找到一条从源点到达汇点的花费最小的路径，该花费 = 使用该路径上的边的单位费用之和。
　　2、然后找出这条路径上的边的容量的最小值f，则当前最大流 max_flow 扩充f（求最大流的过程），同时当前最小费用 min_cost 扩充 f*min_dist(s,t)。
　　3、更新路径流量 flow[][] ，将这条路径上的每条正向边的容量都减少f，每条反向边的容量都增加f。
　　4、重复（1~3）直到无法找到从源点到达汇点的路径。


int cap[500][500],cost[500][500],flow[500][500];//cap是容量，cost是花费，flow是流量
int pre[500],dis[500],vis[500],cnt[500];//pre是记录增广路的前驱节点，dis[i]是记录源点到节点i的最小距离
//vis[i]标记点是否在队列中，cnt[i]记录点i进入队列的次数

int n,m;
int st,endd;
int mn_cost,mx_flow;
int spfa()
{
    for(int i=0;i<n;i++)
        dis[i]=mx;
    memset(vis,0,sizeof(vis));
    memset(cnt,0,sizeof(cnt));

    queue<int>p;
    p.push(st);//st是起点
    vis[st]=1;
    cnt[st]=1;
    dis[st]=0;
    while(!p.empty())
    {
        int now=p.front();
        p.pop();
        vis[now]=0;
        for(int i=0;i<n;i++)
        {
            if(cap[now][i]>flow[now][i]&&dis[i]>dis[now]+cost[now][i])//这里将费用看成是长度，求源点到汇点的最小距离
            {
                dis[i]=dis[now]+cost[now][i];
                pre[i]=now;
                if(vis[i]==0)
                {
                    p.push(i);
                    vis[i]=1;
                    cnt[i]++;
                    if(cnt[i]>n)
                        return 0;
                }
            }
        }
    }
    if(dis[endd]>=mx)
        return 0;
    return 1;
}
void bfs(int n)//顶点数
{
    memset(flow,0,sizeof(flow));
    mx_flow=0;
    mn_cost=0;
    while(spfa())
    {
        int f=mx;
        for(int i=endd;i!=st;i=pre[i])
            f=min(f,cap[pre[i]][i]-flow[pre[i]][i]);

        for(int i=endd;i!=st;i=pre[i])
        {
            flow[pre[i]][i]+=f;
            flow[i][pre[i]]-=f;
        }
        mn_cost+=dis[endd]*f;        　　　　　mx_flow+=f;

    }
}

